Інструкції контролю руху: for, if, else та defer
Навчіться контролювати рух вашим кодом за допомогою умов, циклів, перемикань та відкладень.

The Go Authors
https://golang.org

* For

Go має тільки один запис циклування — цикл `for`.

Цикл `for` пишеться так само, як у C або Java, крім того, що `(`)` відсутні (вони навіть недозволені), а `{`}` є обов’язковими.

.play flowcontrol/for.go

* For, продовження

Як у C або Java, інструкції перед та після умови можуть бути залишені порожніми.

.play flowcontrol/for-continued.go

* For — це "while" для Go

Врешті-решт, можна позбавитись крапок з комами — `while` з C замінюється `for` у Go.

.play flowcontrol/for-is-gos-while.go

* Назавжди

Якщо пропустити умову повторення, цикл повторюватиметься без кінця, тож нескінченний цикл виражений щільно.

.play flowcontrol/forever.go

* If

Інструкція `if` виглядає так само, як у C або Java, окрім того, що `(`)` відсутні, а `{`}` є обов’язковими.

(Впізнаєте?)

.play flowcontrol/if.go

* If з короткою інструкцією

Подібно до `for`, `if` може починатися з короткої інструкції для виконання перед умовою.

Змінні, що оголошені в цій інструкції, присутні в контексті тільки до закінчення `if`.

(Спробуйте використати `v` в останній інструкції `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If та else

Змінні, що оголошені всередині короткої інструкції `if`, також доступні всередині будь-якого з блоків `else`.

(Обидва виклики `pow` виконуються та повертають ще до того, як починається виклик `fmt.Println` в `main`.)

.play flowcontrol/if-and-else.go

* Вправа: Цикли та функції

Аби погратися з функціями та циклами, напишіть функцію квадратного корня за допомогою методу Ньютона.

В даному випадку, метод Ньютона полягає в тому, щоб приблизно визначити `Sqrt(x)`, підібравши вихідну точку _z_, а потім повторювати:

.image /content/img/newton.png

Для початку, просто виконайте розрахунок 10 разів та подивіться, як ви наблизились до відповіді для різних значень (1, 2, 3, ...).

Потім, замініть умову циклу, щоб він зупинявся, як тільки значення перестало змінюватися (або змінюється з дуже малою різницею). Подивіться, чи це займає більше або менше повторень. Як близько ви до [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]?

Підказка: щоб оголосити та присвоїти значення з рухомою комою, надайте їй синтаксис рухомої коми або застосуйте перетворення:

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Напевно, ви здогадувались, як виглядатиме `switch`.

Тіло `case` переривається автоматично, за винятком, коли воно завершується інструкцією `fallthrough`.

.play flowcontrol/switch.go

* Switch, порядок оцінення

Випадки переключення оцінюються згори донизу, зупиняючись, якщо випадок успішний.

(Наприклад,

	switch i {
	case 0:
	case f():
	}

не викликає `f`, якщо `i==0`.)

#appengine: *Примітка:* На Go майданчику відлік часу завжди починається з 
#appengine: 2009-11-10 23:00:00 UTC, розкрити значимість цієї дати залишаємо
#appengine: вправою для читача.

.play flowcontrol/switch-evaluation-order.go

* Switch без умови

Переключення без умови — це те саме, що `switch`true`.

Ця побудова може бути простим способом запису довгих ланцюжків if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer

Інструкція відкладення переносить виконання функції на час, доки не завершиться функція, що її містить.

Аргументи відкладеного виклику визначаються невідкладно, але сам виклик не виконується до повернення функції, що його оточує.

.play flowcontrol/defer.go

* Накопичення відкладень

Відкладений виклик функціє додається в стек. Коли функція повертає, її відкладені виклики виконуються в порядку «останнім зайшов — першим пішов».

Щоб дізнатися більше про інструкцію відкладення, прочитайте цей
[[https://blog.golang.org/defer-panic-and-recover][запис у блозі]].

.play flowcontrol/defer-multi.go

* Вітаємо!

Ви завершили заняття!

Ви можете повернутися до переліку [[/list][модулів]], щоб знайти, що вивчити далі, або перейти до [[javascript:click('.next-page')][наступного заняття]].
